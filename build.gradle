buildscript {
	ext {
		springBootVersion = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6"
	}
}

plugins {
	id "org.sonarqube" version "2.6.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

jacoco {
	toolVersion = "0.8.2"
}

group = 'org.zarechnev.blog'
version = '0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

jar {
	manifest {
		attributes('Main-Class': 'org.zarechnev.blog.WebBlogApplication')
	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile(group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1')
	compile(group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1')
	runtimeOnly('com.h2database:h2')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	compileOnly 'org.projectlombok:lombok:1.18.4'
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

task printTotalCoverage(dependsOn: 'jacocoTestReport') {
	doLast {
		def testReportFile = project.file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
		if (testReportFile.exists()) {
			def rootNode = new XmlParser(false, false).parseText(testReportFile.text.replaceAll("<!DOCTYPE[^>]*>", ""))
			def totalCovered = 0
			def totalMissed = 0
			rootNode.counter.each { counter ->
				try {
					totalCovered += Integer.valueOf(counter.@covered as String)
					totalMissed += Integer.valueOf(counter.@missed as String)
				} catch (ignore) {}
			}
			// Test coverage parsing regex: Total:\s[\d\.\,]+%
			println "Coverage Total: ${String.format('%.2f', 100.0 * totalCovered / (totalMissed + totalCovered))}%"
		}
	}
}